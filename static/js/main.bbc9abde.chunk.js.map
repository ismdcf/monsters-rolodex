{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeHolder","handleOnChange","type","placeholder","onChange","App","handleOnSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,kBAAO,SAAAC,GAChB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAK,oBACpE,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCHbC,EAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCJlBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAYC,EAAmB,EAAnBA,eACnC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLC,YAAaH,EACbI,SAAUH,MC+BPI,E,kDAjCX,aAAe,IAAD,8BACV,gBAYJC,qBAAuB,SAACC,GACpB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAZxC,EAAKC,MAAQ,CACTf,SAAU,GACVY,YAAY,IAJN,E,gEAOO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAASoB,S,+BAMrC,IAAD,EAC0BC,KAAKN,MAA7Bf,EADF,EACEA,SAASY,EADX,EACWA,YACVU,EAAmBtB,EAASuB,QAAO,SAAA7B,GAAO,OACxCA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBACxD,OACI,sBAAKhC,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACIW,YAAY,sBACZC,eAAgBiB,KAAKZ,uBAEzB,cAAC,EAAD,CAAUT,SAAUsB,W,GA5BlBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bbc9abde.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nexport const Card = props =>{\n    return <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt={\"monster profile\"}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n}","import React from 'react';\nimport './card-list.styles.css'\nimport {Card} from \"../card/card.component\";\nexport const CardList = props =>{\n    return <div className=\"card-list\">\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster = {monster}/>\n        ))}\n    </div>\n}","import React from 'react'\nimport './search-box.styles.css'\nexport const SearchBox = ({placeHolder,handleOnChange}) =>{\n    return(\n        <input\n            className=\"search\"\n            type=\"search\"\n            placeholder={placeHolder}\n            onChange={handleOnChange}/>\n    )\n}","import React, {Component} from \"react\";\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField:\"\"\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters:users}))\n    }\n\n    handleOnSearchChange = (event) =>{\n        this.setState({searchField:event.target.value})\n    }\n    render() {\n        const {monsters,searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster =>\n                monster.name.toLowerCase().includes(searchField.toLowerCase()))\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox\n                    placeHolder=\"Search for Monsters\"\n                    handleOnChange={this.handleOnSearchChange}\n                    />\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}